'use strict'
Object.defineProperty(exports, '__esModule', { value: true })
const contract = require('@truffle/contract')
const BufferChainlink = contract({
 "contractName": "BufferChainlink",
 "abi": [],
 "evm": {
  "bytecode": {
   "linkReferences": {},
   "object": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220538de73e714033026bd70c3e694f694755dacfe368fc4240d33128dfabf770cb64736f6c63430007000033",
   "opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 DUP14 0xE7 RETURNDATACOPY PUSH18 0x4033026BD70C3E694F694755DACFE368FC42 BLOCKHASH 0xD3 BALANCE 0x28 0xDF 0xAB 0xF7 PUSH17 0xCB64736F6C634300070000330000000000 ",
   "sourceMap": "434:9265:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
  },
  "deployedBytecode": {
   "immutableReferences": {},
   "linkReferences": {},
   "object": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220538de73e714033026bd70c3e694f694755dacfe368fc4240d33128dfabf770cb64736f6c63430007000033",
   "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 DUP14 0xE7 RETURNDATACOPY PUSH18 0x4033026BD70C3E694F694755DACFE368FC42 BLOCKHASH 0xD3 BALANCE 0x28 0xDF 0xAB 0xF7 PUSH17 0xCB64736F6C634300070000330000000000 ",
   "sourceMap": "434:9265:28:-:0;;;;;;;;"
  },
  "methodIdentifiers": {}
 },
 "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for writing to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/thomas/workspace/chainlink/evm-contracts/src/v0.7/vendor/BufferChainlink.sol\":\"BufferChainlink\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/home/thomas/workspace/chainlink/evm-contracts/src/v0.7/vendor/BufferChainlink.sol\":{\"keccak256\":\"0x2f6d22045058c18b998ecaa02fafbf346fd1e2b6f5318d6315e4e61ae094071d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91083b22b07ef06779d92d93d5f670525734ed1b39853fa4330ad1925e7b4584\",\"dweb:/ipfs/QmaVHnAJVqytCLQ4nCkm2pMcyGeuauv4sm6sXPrVQLXtnc\"]}},\"version\":1}"
})

if (process.env.NODE_ENV === 'test') {
  try {
    eval('BufferChainlink.setProvider(web3.currentProvider)')
  } catch (e) {}
}

exports.BufferChainlink = BufferChainlink
